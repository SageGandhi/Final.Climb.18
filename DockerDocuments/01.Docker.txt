Enable HyperVisor In Win10 Apps&Features.
Run AppWiz.cpl In Run Command.
Install Windows Enterprise 64 Bit VmWare Image[Windows 10 Enterprise].Enable Hyper-Visor In Control Panel->Programs&Features->Turn Windows Features On Or Off[See 01.WindowsHyperVisorEnabled.jpeg].
Update Windows By Checking For Updates.
Check VmWare Settings,As Shown In Document[01.SetUpDockerWindowsVmWare...02.SetUpDockerWindowsVmWare].
Download Docker Community Edition For Windows For Docker Site.
Once Done Command:docker version.
Create Docker Id/Email:Get It From DockerCredential.txt
Follow https://docs.docker.com/docker-for-windows/ Instruction:
Copyright (C) Microsoft Corporation. All rights reserved.
---------------------------------------------------------------------------------------------------------------------------------
PS C:\Users\Docker> docker --version -->Docker version 17.09.1-ce, build 19e2cf6
PS C:\Users\Docker> docker-compose --version -->docker-compose version 1.17.1, build 6d101fb0
PS C:\Users\Docker> docker-machine --version -->docker-machine.exe version 0.13.0, build 9ba6da9
---------------------------------------------------------------------------------------------------------------------------------
PS C:\Users\Docker> docker version & PS C:\Users\Docker> docker info
---------------------------------------------------------------------------------------------------------------------------------
PS C:\Users\Docker> docker run hello-world & 
PS C:\Users\Docker> docker run -d -p 80:80 --name webserver nginx
------------------------------------------------------------------------------------------------------------------------------
PS C:\Users\Docker> docker stop webserver
PS C:\Users\Docker> docker start webserver
PS C:\Users\Docker> docker rm -f webserver
PS C:\Users\Docker> docker images
PS C:\Users\Docker> docker ps
PS C:\Users\Docker> docker rmi nginx
PS C:\Users\Docker> docker rmi -f hello-world
PS C:\Users\Docker> docker rmi -f ubuntu
------------------------------------------------------------------------------------------------------------------------------
Tab Completion For Docker In PowerShell:
PowerShell Run As Administrator,Then Run Following Commands:
PS C:\Windows\system32> Set-ExecutionPolicy RemoteSigned
PS C:\Windows\system32> Install-Module posh-docker
For Current User Only:PS C:\Windows\system32> Install-Module -Scope CurrentUser posh-docker
Execute DockerAutoCompletionPs.ps1 
PS C:\Users\Docker\Desktop\DockerDocuments> .\DockerAutoCompletionPs.ps1
------------------------------------------------------------------------------------------------------------------------------
Install Kitematics For Repository & Registry Using Credential Mentioned Above.
------------------------------------------------------------------------------------------------------------------------------
Only Pull Images From DockerHub:docker pull <ImageName>
Remove Images From Docker Client:  docker rmi <ImageRepository:Tag>
Containers Can Start/Stop/Remove From Docker Daemon Engine.
docker rmi $(docker images -q) Removes All Images Quietly.
Docker Image Container Run In Detached/Interactive Mode: docker run -d/-it --name WebServer01 -p 80:8080 httpd
A Collection Of Docker Engine Joined In Cluster Is Swarm,Engine Running In Swarm Called Swarm Mode.
Swarm Contains Manager Node[Highly Available & Assign Task To Worker Node] & Worker Node.
One Manager Node Will Be The Primary/Leader,Raft Consensus Algorithm To Achieve Distributed Consensus.
Docker Service Maintain No Of Replica Fault Tolerant[If One Fail,Creating A Replacement Container].
Goto Aws,Create 3 Manager Node & 3 Worker Node[Ec2-Instances].All These Instances Must Have Docker 1.12+.
Run Single Command wget -qO- https://get.docker.com/|sh To Install Docker.
Git Command To Config Basic Meta Information[Required For Check In These Files In GitHub But Not Related To Docker]:
git config --global user.email "prajit.ju@gmail.com"
git config --global user.name "Prajit Gandhi"

-------------------------------------------Steps To Install Docker In Aws Ec2 Instance------------------------------------------------
chmod 400 <Private Key>: chmod 400 DockerSwarm.pem
ssh -i <Private Key> <User>@<Fully Qualified Name>:ssh -i DockerSwarmMumbai.pem ec2-user@ec2-13-126-221-221.ap-south-1.compute.amazonaws.com
sudo yum update -y.
sudo yum install docker -y.
sudo service docker start.
sudo usermod -a -G docker ec2-user.
Then Reboot.
Lets Try Docker Command Without Sudo.
-------------------------------------------Steps To Install Docker In Aws Ec2 Instance------------------------------------------------
No|Manager Node Name       |Public Ip Address|Public Domain Name Server
-------------------------------------------------------------------------------------------
01|DockerSwarmManagerNode01|13.127.2.71      |ec2-13-127-2-71.ap-south-1.compute.amazonaws.com
02|DockerSwarmManagerNode02|13.127.103.98    |ec2-13-127-103-98.ap-south-1.compute.amazonaws.com

No|Worker Node Name       |Public Ip Address |Public Domain Name Server
-------------------------------------------------------------------------------------------
01|DockerSwarmWorkerNode01|13.127.22.15      |ec2-13-127-22-15.ap-south-1.compute.amazonaws.com
02|DockerSwarmWorkerNode02|13.126.138.120    |ec2-13-126-138-120.ap-south-1.compute.amazonaws.com

Ssh Into DockerSwarmManagerNode01,Do Execute [docker swarm init] To Initialize Swarm,Output Provided Below:
To Leave The Swarm Use docker swarm leave --force[In Case Only One Manager Left In The Swarm]
docker swarm init --advertise-addr 13.127.2.71:2377 --listen-addr 13.127.2.71:2377
[Host Ca Contain Multiple Nic/Ip But Advertising Address Will Be The One To Expose Swarm Related Api Expose] 
Docker Engine Port 2375,Secure Engine Port 2376,Swarm Use 2377 Port No.

Swarm Initialized: Current Node (hskk9e9qdqo12dqbaede2s59g) Is Now A Manager.
To Add A Worker To This Swarm, Run The Following Command:
docker swarm join --token SWMTKN-1-5abazca6l79p4uiy8vq2nrraz9zfhnwkft9awr9e6fvgayh053-a5sjajxetnz3hklfm7nqk6zeo 13.127.2.71:2377
To Add A Manager/Worker To This Swarm, Run 'docker swarm join-token manager/docker swarm join-token worker' & Follow The Instructions.
Paste This In 2nd Manager Terminal:
docker swarm join --token SWMTKN-1-5abazca6l79p4uiy8vq2nrraz9zfhnwkft9awr9e6fvgayh053-9mukmnzh6nhf9l8lmbxr2w051 13.127.2.71:2377
    --advertise-addr 13.127.103.98:2377 --listen-addr 13.127.103.98:2377
Check Security Group In Case Not Able To Connect After Timeout,Allow 2377 Port.
docker node ls Command Will Show Current Host Machine In * & Manager Status[As Leader/Reachable/Unreachable/""]
docker node promote <Node Id> Will Promote Any Worker Node To Manager Node.

Docker Captain:
Install In Ec2:
    sudo apt-get remove docker docker-engine docker.io
    sudo apt-get update
    sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo apt-key fingerprint 0EBFCD88
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt-get update
    sudo apt-get install docker-ce
    apt-cache madison docker-ce
    sudo usermod -a -G docker ubuntu & Reboot Elastic Compute Cloud Instance.
Execute Commands:
    sudo docker version
    sudo docker info
    Meta Command:
        docker
        docker version --help
sudo apt-get upgrade --> For Upgrading Packages
Run Nginx Container:
    In Detached/Background Mode:docker container run --name NginxContainer01 --publish 80:80 --detach nginx
    Default Mode:docker container run --publish 80:80 --name NginxContainer01 nginx
    List All Container Running:docker container ls
    List All Container:docker container ls
    Stoping Container: docker container stop <Uniquely Identified Container Id>
    Getting Logs When Detached: docker container logs <Container Name>
    Remove All Container:docker container rm -f <Uniquely Identified Container Id+>
    Container Is A Restricted Process Inside Host Operating System.
        docker container run --detach --publish 80:80 --name Nginx02 nginx 
        List Container: docker ps
        Display Running Process Of Container: docker top Nginx02[<Container Name>]
        Running As A Process Check: ps aux|grep <Pid>
    Run Multiple Container:
        docker container run --name MySql01 -e MYSQL_ROOT_PASSWORD=mysqlroot --detach --publish 3307:3306 mysql
        Generate Root Password: ieXeephei7aigu4gai9aizooghaethof Using docker container logs MySql02
        docker container run --name MySql02 -e MYSQL_RANDOM_ROOT_PASSWORD=yes --detach --publish 3306:3306 mysql
        docker container run --name WebServerHttpd01 --detach --publish 8080:80 httpd-->curl localhost:8080
        docker container run --detach --publish 80:80 --name NginxProxy03 nginx-->curl localhost
        docker container stop MySql01 MySql02 NginxProxy03 WebServerHttpd01
        docker container rm MySql01 MySql02 NginxProxy03 WebServerHttpd01
        docker image ls-->Display All Images In Image Cache
    Inspect/Statistics/Top:
        docker container run --name MySql02 -e MYSQL_RANDOM_ROOT_PASSWORD=yes --detach --publish 3306:3306 mysql
        docker container run --name WebServerHttpd01 --detach --publish 8080:80 httpd
        docker container run --detach --publish 80:80 --name NginxProxy03 nginx
        
        docker container top MySql02
        docker container top WebServerHttpd01
        docker container top NginxProxy03
        Inspect:
        docker container inspect MySql02|tee MySql02Inspect.json
        docker container inspect WebServerHttpd01|tee WebServerHttpd01Inspect.json
        docker container inspect NginxProxy03|tee NginxProxy03Inspect.json
        
        docker container stats --all/docker container stats
    Getting Into Container:
        Check Existing Image In Local Image Cache:docker images
        Pull Image From Docker Hub:docker pull ubuntu/docker pull alpine
        docker container run --help[--interactive --tty]
        Run Installed Application Along With New Container Start,Command End,Container Exited:
            docker container run --interactive --tty --name NginxProxy04 nginx bash
            docker container start --interactive --attach Ubuntu01[ReRun Stopped Container]
        Run Installed Application In A Running Container As A Separate Process:
            docker container exec --interactive --tty MySql02 bash
        Stopping All Container:
            docker container stop NginxProxy03 
            docker container stop WebServerHttpd01 
            docker container stop MySql02
            docker container rm --force a03680acf6e5 cf1875c49d5a fb238cb3ac61 e7be5b38ea3f 830e9c2d9123 350890def4ee
        Batteries Included But Removable:Convention Over Configuration:Configuration Is An Exception:
            Listing All Network Type:docker network ls
            docker network inspect bridge/docker network inspect e117d891fff4
            Create NetWork:docker network create --driver bridge --subnet 10.0.0.1/24 Bridge01 
            Install Bridge-Utils For Linux:sudo apt-get install bridge-utils
                Then Use brctl --help & brctl show & ip link show
        Install 2 Container & Communucate:
            docker run --interactive --tty --name Alpine01 --network Bridge01 --detach alpine
            docker run --interactive --tty --name Alpine02 --network Bridge01 --detach alpine
            docker network inspect Bridge01 
            To See Original Bridge In The Host:brctl show
            docker container exec --interactive --tty Alpine01 sh & ip a & ping 10.0.0.3 & ping Alpine02
            docker container exec --interactive --tty Alpine02 sh & ip a & ping 10.0.0.2 & ping Alpine01
        Use External Port For Internal Container:
            docker container run --name Nginx01 --publish 80:80 --network Bridge01 --detach nginx
            docker container ls & docker container rm -f 4ebd96b02929 57d84aaa097f 72b7deeced6c
            docker container exec --interactive --tty Alpine02 sh
        MultiHost Network:
            Create An Instance & Install Docker.
            Create Swarm Manager:docker swarm init & Add Second Node As Worker
            docker swarm join --token SWMTKN-1-3vudwu3xk32escbnv8iir46577uob93gz6srfssy3ibpzxk8jd-35x52hvmdn8gznbvolvsnpzoz 172.31.5.98:2377
            To Get Above Command Again Use docker swarm join-token manager